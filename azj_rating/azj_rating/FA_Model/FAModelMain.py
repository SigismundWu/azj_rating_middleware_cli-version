# -*- coding: utf-8 -*-
import numpy as np
import math


class FAModelMain(object):

    def __init__(self, df_wide):
        # get df_wide generated by PreProc
        self.df_wide = df_wide
        self.cache_columns = ['normal_lesson_log_count_processed_ask_for_leave_cahce1',
                              'normal_lesson_log_count_processed_late_lesson_cache2',
                              'normal_lesson_log_count_processed_no_show_cache3',
                              'normal_lesson_log_count_processed_abnormal_lesson_cache4',
                              'normal_lesson_log_count_processed_abnormal_all_cahce5']

    def judge_new_teacher(self):
        # 判断是否是新老师
        df_wide = self.df_wide
        df_wide['old_new_teacher'] = 'old'
        df_wide.loc[(df_wide['首课时间'].isnull()) &
                    (df_wide['state'].isin(['oboard', 'active'])), 'old_new_teacher'] = 'new'
        # 缺失值填补
        # 无用字段去除
        df_wide.drop(['创建时间', '首次上架时间', '首课时间', 'state'], axis=1, inplace=True)
        columns = list(df_wide.columns)
        columns.pop(columns.index('awj_teacher_id'))
        columns.pop(columns.index('old_new_teacher'))
        # new teacher: mean
        for itm in columns:
            df_wide.loc[df_wide['old_new_teacher'] == 'new', itm] = df_wide.loc[
                (df_wide['normal_lesson_log_count'] > 0), itm].mean()
        # old teacher:0
        df_wide.fillna(value=0, inplace=True)
        # 有些老师没有请过假，advanced_days字段为0，填为均值
        df_wide.loc[(df_wide['ask_for_leave_log_count'] == 0) & (df_wide['normal_lesson_log_count'] > 0),
                    'advanced_days_max'] = df_wide.loc[(df_wide['advanced_days_max'] != 0) &
                                                       df_wide['normal_lesson_log_count'] > 0,
                                                       'advanced_days_max'].mean()
        df_wide.loc[(df_wide['ask_for_leave_log_count'] == 0) & (df_wide['normal_lesson_log_count'] > 0),
                    'advanced_days_log_mean'] = df_wide.loc[(df_wide['advanced_days_log_mean'] != 0) &
                                                            df_wide['normal_lesson_log_count'] > 0,
                                                            'advanced_days_log_mean'].mean()

        return df_wide

    def smooth_process0(self):
        # 平滑
        df_wide = self.judge_new_teacher()
        smooth = ['late_lesson_log_count', 'no_show_lesson_log_count', 'abnormal_lesson_log_count',
                  'ask_for_leave_log_count',
                  'stu_comment_log_bad_behavior']
        for itm in smooth:
            df_wide[itm] = df_wide[itm] + math.log(2, 10)
        # 字段处理
        # 比例计算
        df_wide['late_lesson_log_percent'] = df_wide['late_lesson_log_count'] / df_wide['normal_lesson_log_count']
        df_wide['no_show_lesson_log_percent'] = df_wide['no_show_lesson_log_count'] / df_wide['normal_lesson_log_count']
        df_wide['abnormal_lesson_log_percent'] = df_wide['abnormal_lesson_log_count'] / df_wide['normal_lesson_log_count']
        df_wide['ask_for_leave_log_percent'] = df_wide['ask_for_leave_log_count'] / df_wide['normal_lesson_log_count']

        return df_wide

    def smooth_process1(self):
        # 老师异常行为有一项出现较大异常值时或整体较差，normal_lesson_log_count降为相应较低数值，整体表现变差
        cache_columns = self.cache_columns
        df_wide = self.smooth_process0()
        counts = ['ask_for_leave_log_count', 'late_lesson_log_count', 'no_show_lesson_log_count',
                  'abnormal_lesson_log_count', 'abnormal_all_log_count']
        columns = ['ask_for_leave_log_percent', 'late_lesson_log_percent', 'no_show_lesson_log_percent',
                   'abnormal_lesson_log_percent', 'abnormal_all_log_percent']
        for itm in cache_columns:
            df_wide[itm] = df_wide['normal_lesson_log_count']
        df_wide['normal_lesson_log_count_processed'] = df_wide['normal_lesson_log_count']

        # 分位数
        quantiles = [[0.6, 0.7, 0.75, 0.8, 1], [0.8, 0.9, 0.92, 0.95, 1],
                     [0.5, 0.6, 0.66, 0.75, 0.8, 0.85, 0.9, 1], [0.8, 0.85, 0.9, 0.95, 1],
                     [0.55, 0.66, 0.75, 0.85, 1]]
        # 降低比例
        indexes = [[0.8, 0.6, 0.3, 0.1], [0.8, 0.7, 0.3, 0.1],
                   [0.8, 0.75, 0.6, 0.5, 0.3, 0.1, 0.03], [0.9, 0.85, 0.7, 0.3],
                   [0.8, 0.7, 0.3, 0.1]]
        for i in range(len(columns)):
            for k in range(len(quantiles[i]) - 1):
                standard1 = df_wide.loc[df_wide['normal_lesson_log_count'] > 0,
                                        columns[i]].quantile(quantiles[i][k])
                standard2 = df_wide.loc[df_wide['normal_lesson_log_count'] > 0,
                                        columns[i]].quantile(quantiles[i][k + 1])
                # 降低正常上课的数量
                df_wide.loc[(df_wide['normal_lesson_log_count'] > 0) &
                            (df_wide[columns[i]] > standard1) & (df_wide[columns[i]] <= standard2),
                            cache_columns[i]] = df_wide['normal_lesson_log_count'] * indexes[i][k]
                # 新老师因为平滑原因，所以再复原，不惩罚
                df_wide.loc[(df_wide['normal_lesson_log_count'] > 0) &
                            (df_wide[columns[i]] > standard1) & (df_wide[columns[i]] <= standard2) &
                            (df_wide[counts[i]] == math.log(2, 10)) &
                            (df_wide['normal_lesson_log_count'] <= 8),
                            cache_columns[i]] = df_wide['normal_lesson_log_count']

        return df_wide

    def smooth_process_final(self):
        cache_columns = self.cache_columns
        df_wide = self.smooth_process1()
        # 从5行cache_colume中取最小值
        df_wide['normal_lesson_log_count_processed'] = df_wide[cache_columns].min(axis=1)
        # 大小方向统一化
        # 重新计算四个percent
        df_wide['late_lesson_log_percent_processed'] = df_wide['late_lesson_log_count'] / df_wide[
            'normal_lesson_log_count_processed']
        df_wide['no_show_lesson_log_percent_processed'] = df_wide['no_show_lesson_log_count'] / df_wide[
            'normal_lesson_log_count_processed']
        df_wide['abnormal_lesson_log_percent_processed'] = df_wide['abnormal_lesson_log_count'] / df_wide[
            'normal_lesson_log_count_processed']
        df_wide['ask_for_leave_log_percent_processed'] = df_wide['ask_for_leave_log_count'] / df_wide[
            'normal_lesson_log_count_processed']
        df_wide['normal_log_lesson_per_week'] = df_wide['normal_lesson_log_count_processed'] / (
            df_wide['lesson_time_range'])
        # 取倒数
        rcp = ['late_lesson_log_processed', 'no_show_lesson_log_processed',
               'abnormal_lesson_log_processed', 'ask_for_leave_log_processed',
               'stu_comment_log_bad_behavior_processed']
        cols = ['late_lesson_log_percent_processed', 'no_show_lesson_log_percent_processed',
                'abnormal_lesson_log_percent_processed', 'ask_for_leave_log_percent_processed',
                'stu_comment_log_bad_behavior']
        for i in range(len(rcp)):
            df_wide[rcp[i]] = 1 / df_wide[cols[i]]

        return df_wide

    def fix_process_0(self):
        df_wide = self.smooth_process_final()
        # 修正老师上课数量少但好评较多的情况（如老师id642）
        columns = ['late_lesson_log_count', 'no_show_lesson_log_count',
                   'ask_for_leave_log_count', 'abnormal_lesson_log_count']
        no_smooths = ['late_lesson_log_count_no_smooth', 'no_show_lesson_log_count_no_smooth',
                      'ask_for_leave_log_count_no_smooth', 'abnormal_lesson_log_count_no_smooth']
        for i in range(len(columns)):
            df_wide[no_smooths[i]] = df_wide[columns[i]]
            df_wide.loc[df_wide[no_smooths[i]] == math.log(2, 10), no_smooths[i]] = 0
        df_wide['stu_comment_log_good_behavior_processed'] = df_wide['stu_comment_log_good_behavior'] / (
                df_wide['normal_lesson_log_count']
                + df_wide['late_lesson_log_count_no_smooth']
                + df_wide['no_show_lesson_log_count_no_smooth']
                + df_wide['ask_for_leave_log_count_no_smooth']
                + df_wide['abnormal_lesson_log_count_no_smooth'])
        df_wide['stu_comment_log_bad_behavior_processed'] = df_wide['stu_comment_log_bad_behavior'] / (
            df_wide['normal_lesson_log_count'])

        return df_wide

    def fix_process_1(self):
        df_wide = self.fix_process_0()
        # 修正老师请假次数过多，但提前请假天数指标过好的情况（如老师id642）
        columns = ['advanced_days_log_mean', 'advanced_days_max']
        quantiles = [0.6, 0.66, 0.7, 0.75, 0.77, 0.8, 0.85, 1]
        indexes = [0.9, 0.8, 0.7, 0.5, 0.3, 0.1, 0.05]
        for i in range(len(columns)):
            for k in range(len(quantiles) - 1):
                percent1 = df_wide.loc[df_wide['normal_lesson_log_count'] > 0,
                                       'log_ask_for_leave/log_normal_lesson'].quantile(quantiles[k])
                percent2 = df_wide.loc[df_wide['normal_lesson_log_count'] > 0,
                                       'log_ask_for_leave/log_normal_lesson'].quantile(quantiles[k + 1])
                df_wide.loc[(df_wide['normal_lesson_log_count'] > 0) &
                            (df_wide['log_ask_for_leave/log_normal_lesson'] > percent1) &
                            (df_wide['log_ask_for_leave/log_normal_lesson'] <= percent2),
                            columns[i]] = df_wide[columns[i]] * indexes[k]

        return df_wide

    def fix_process_final(self):
        df_wide = self.fix_process_1()
        # 修正有些老师过去3个月内无qc，分数为0分的情况
        columns = ['log_decay_score_mean', 'teacher_score_min', 'teacher_score_max']
        for itm in columns:
            df_wide.loc[(df_wide['normal_lesson_log_count'] > 0) &
                        (df_wide[itm].isin([np.nan, 0])), itm] = df_wide[itm + '_all']
        # 无上课记录老师
        columns = list(df_wide.columns)
        columns.pop(columns.index('awj_teacher_id'))
        for itm in columns:
            df_wide.loc[df_wide['normal_lesson_log_count'] == 0, itm] = 0
        # 只取有行为数据的
        df_wide_final = df_wide.loc[df_wide['normal_lesson_log_count'] > 0]
        # delete columns
        df_wide_final.drop(['advanced_days_std', 'teacher_score_std',
                            'advanced_days_min', 'lesson_time_range', 'old_new_teacher',
                            'teacher_qc_count', 'normal_lesson_log_count', 'late_lesson_log_count',
                            'no_show_lesson_log_count', 'abnormal_lesson_log_count',
                            'ask_for_leave_log_count', 'normal_log_lesson_per_week',
                            'stu_comment_log_good_behavior', 'stu_comment_log_bad_behavior',
                            'log_ask_for_leave/log_normal_lesson', 'abnormal_lesson_log_percent',
                            'late_lesson_log_percent', 'no_show_lesson_log_percent',
                            'ask_for_leave_log_percent', 'abnormal_all_log_count',
                            'late_lesson_log_percent_processed', 'no_show_lesson_log_percent_processed',
                            'abnormal_lesson_log_percent_processed', 'ask_for_leave_log_percent_processed',
                            'normal_lesson_log_count_processed', 'abnormal_all_log_percent',
                            'normal_lesson_log_count_processed_ask_for_leave_cahce1',
                            'normal_lesson_log_count_processed_late_lesson_cache2',
                            'normal_lesson_log_count_processed_no_show_cache3',
                            'normal_lesson_log_count_processed_abnormal_lesson_cache4',
                            'normal_lesson_log_count_processed_abnormal_all_cahce5',
                            'log_decay_score_mean_all', 'teacher_score_max_all', 'teacher_score_min_all',
                            'stu_comment_log_bad_behavior_processed',
                            'late_lesson_log_count_no_smooth', 'no_show_lesson_log_count_no_smooth',
                            'ask_for_leave_log_count_no_smooth', 'abnormal_lesson_log_count_no_smooth'], axis=1,
                           inplace=True)

        return df_wide, df_wide_final
